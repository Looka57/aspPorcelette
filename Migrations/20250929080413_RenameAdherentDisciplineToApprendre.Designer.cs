// <auto-generated />
using System;
using ASPPorcelette.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASPPorcelette.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250929080413_RenameAdherentDisciplineToApprendre")]
    partial class RenameAdherentDisciplineToApprendre
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ASPPorcelette.API.Models.Actualite", b =>
                {
                    b.Property<int>("ActualiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActualiteId"));

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateDePublication")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EvenementId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenseiId")
                        .HasColumnType("int");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActualiteId");

                    b.HasIndex("EvenementId");

                    b.HasIndex("SenseiId");

                    b.ToTable("Actualites");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Adherent", b =>
                {
                    b.Property<int>("AdherentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdherentId"));

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdhesion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDeNaissance")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRenouvellement")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdherentId");

                    b.ToTable("Adherents");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Apprendre", b =>
                {
                    b.Property<int>("AdherentId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.HasKey("AdherentId", "DisciplineId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Apprendre", (string)null);
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.CategorieTransaction", b =>
                {
                    b.Property<int>("CategorieTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategorieTransactionId"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategorieTransactionId");

                    b.ToTable("CategorieTransactions");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Compte", b =>
                {
                    b.Property<int>("CompteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompteId"));

                    b.Property<decimal>("Epargne")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CompteId");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Cours", b =>
                {
                    b.Property<int>("CoursId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoursId"));

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SenseiId")
                        .HasColumnType("int");

                    b.HasKey("CoursId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("SenseiId");

                    b.ToTable("Cours");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Discipline", b =>
                {
                    b.Property<int>("DisciplineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DisciplineId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DisciplineId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Evenement", b =>
                {
                    b.Property<int>("EvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EvenementId"));

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeEvenementId")
                        .HasColumnType("int");

                    b.HasKey("EvenementId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TypeEvenementId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Horaire", b =>
                {
                    b.Property<int>("HoraireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HoraireId"));

                    b.Property<int>("CoursId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HeureDebut")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HeureFin")
                        .HasColumnType("time");

                    b.Property<string>("Jour")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("HoraireId");

                    b.HasIndex("CoursId");

                    b.ToTable("Horaires");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Sensei", b =>
                {
                    b.Property<int>("SenseiId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SenseiId"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Statut")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UtilisateurId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("SenseiId");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("UtilisateurId1");

                    b.ToTable("Senseis");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Tarif", b =>
                {
                    b.Property<int>("TarifId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TarifId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TarifId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Tarifs");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("CategorieTransactionId")
                        .HasColumnType("int");

                    b.Property<int>("CompteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTransaction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DisciplineId")
                        .HasColumnType("int");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CategorieTransactionId");

                    b.HasIndex("CompteId");

                    b.HasIndex("DisciplineId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.TypeEvenement", b =>
                {
                    b.Property<int>("TypeEvenementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeEvenementId"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeEvenementId");

                    b.ToTable("TypeEvenements");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SenseiId")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("AdherentDiscipline", b =>
                {
                    b.Property<int>("AdherentsApprenantAdherentId")
                        .HasColumnType("int");

                    b.Property<int>("DisciplinesPratiqueesDisciplineId")
                        .HasColumnType("int");

                    b.HasKey("AdherentsApprenantAdherentId", "DisciplinesPratiqueesDisciplineId");

                    b.HasIndex("DisciplinesPratiqueesDisciplineId");

                    b.ToTable("AdherentDiscipline");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Actualite", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Evenement", "EvenementAssocie")
                        .WithMany("ActualitesLiées")
                        .HasForeignKey("EvenementId");

                    b.HasOne("ASPPorcelette.API.Models.Sensei", "SenseiAuteur")
                        .WithMany("ActualitesPubliees")
                        .HasForeignKey("SenseiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvenementAssocie");

                    b.Navigation("SenseiAuteur");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Apprendre", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Adherent", "AdherentApprenant")
                        .WithMany("Apprentissages")
                        .HasForeignKey("AdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.Discipline", "DisciplinePratiquee")
                        .WithMany("Apprentissages")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdherentApprenant");

                    b.Navigation("DisciplinePratiquee");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Cours", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Discipline", "Discipline")
                        .WithMany("CoursAssocies")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.Sensei", "Sensei")
                        .WithMany("CoursEnseignes")
                        .HasForeignKey("SenseiId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Discipline");

                    b.Navigation("Sensei");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Evenement", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Discipline", "DisciplineAssociee")
                        .WithMany("EvenementsAssocies")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.TypeEvenement", "TypeEvenement")
                        .WithMany("EvenementsAssocies")
                        .HasForeignKey("TypeEvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisciplineAssociee");

                    b.Navigation("TypeEvenement");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Horaire", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Cours", "Cours")
                        .WithMany("Horaires")
                        .HasForeignKey("CoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cours");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Sensei", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Discipline", "DisciplinePrincipale")
                        .WithMany("SenseisEnseignants")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.User", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId1");

                    b.Navigation("DisciplinePrincipale");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Tarif", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Discipline", "DisciplineConcernee")
                        .WithMany("Tarifs")
                        .HasForeignKey("DisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisciplineConcernee");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Transaction", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.CategorieTransaction", "Categorie")
                        .WithMany("Transactions")
                        .HasForeignKey("CategorieTransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.Compte", "Compte")
                        .WithMany("TransactionsEffectuees")
                        .HasForeignKey("CompteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.Discipline", "DisciplineAssociee")
                        .WithMany("TransactionsAssociees")
                        .HasForeignKey("DisciplineId");

                    b.Navigation("Categorie");

                    b.Navigation("Compte");

                    b.Navigation("DisciplineAssociee");
                });

            modelBuilder.Entity("AdherentDiscipline", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.Adherent", null)
                        .WithMany()
                        .HasForeignKey("AdherentsApprenantAdherentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.Discipline", null)
                        .WithMany()
                        .HasForeignKey("DisciplinesPratiqueesDisciplineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPPorcelette.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASPPorcelette.API.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Adherent", b =>
                {
                    b.Navigation("Apprentissages");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.CategorieTransaction", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Compte", b =>
                {
                    b.Navigation("TransactionsEffectuees");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Cours", b =>
                {
                    b.Navigation("Horaires");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Discipline", b =>
                {
                    b.Navigation("Apprentissages");

                    b.Navigation("CoursAssocies");

                    b.Navigation("EvenementsAssocies");

                    b.Navigation("SenseisEnseignants");

                    b.Navigation("Tarifs");

                    b.Navigation("TransactionsAssociees");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Evenement", b =>
                {
                    b.Navigation("ActualitesLiées");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.Sensei", b =>
                {
                    b.Navigation("ActualitesPubliees");

                    b.Navigation("CoursEnseignes");
                });

            modelBuilder.Entity("ASPPorcelette.API.Models.TypeEvenement", b =>
                {
                    b.Navigation("EvenementsAssocies");
                });
#pragma warning restore 612, 618
        }
    }
}
